name: PR Checks

on:
  pull_request:
    branches: [main, master]

jobs:
  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-modules-cache
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-20-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci
        if: steps.node-modules-cache.outputs.cache-hit != 'true'

      - name: Install dependencies (cache hit)
        run: npm ci
        if: steps.node-modules-cache.outputs.cache-hit == 'true'

      - name: Run security audit
        run: npm audit --audit-level high

      - name: Check for outdated dependencies
        run: npm outdated || true

  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-modules-cache
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-20-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci
        if: steps.node-modules-cache.outputs.cache-hit != 'true'

      - name: Install dependencies (cache hit)
        run: npm ci
        if: steps.node-modules-cache.outputs.cache-hit == 'true'

      - name: Check code formatting
        run: npm run format:check

      - name: Run linter
        run: npm run lint

      - name: Cache test results
        uses: actions/cache@v4
        with:
          path: |
            .jest
            coverage/
          key: ${{ runner.os }}-test-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-test-

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist/
            .eslintcache
          key: ${{ runner.os }}-build-${{ hashFiles('src/**/*', 'package.json', 'vite.config.js') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build project
        run: npm run build

      - name: Check bundle size
        run: |
          BUNDLE_SIZE=$(stat -c%s "dist/react-phoenix.js")
          if [ $BUNDLE_SIZE -gt 1000000 ]; then
            echo "❌ Bundle size ($BUNDLE_SIZE bytes) is too large! Max allowed: 1MB"
            exit 1
          else
            echo "✅ Bundle size ($BUNDLE_SIZE bytes) is within limits"
          fi
